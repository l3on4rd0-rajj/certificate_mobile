import json
import streamlit as st
import requests
import pandas as pd
import plotly.express as px

# Leitura da coleção do Postman
def load_collection(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return json.load(file)

# Função para fazer requisições com base no endpoint
def fetch_data_from_collection(endpoint_info, base_url, auth_token=None):
    url = f"{base_url}/{endpoint_info['url']['path']}"
    method = endpoint_info['method']
    headers = {header['key']: header['value'] for header in endpoint_info.get('header', [])}

    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"

    if method == "GET":
        response = requests.get(url, headers=headers)
    elif method == "POST":
        body = endpoint_info['body'].get('raw', {})
        response = requests.post(url, headers=headers, json=json.loads(body))
    else:
        st.error("Método não suportado.")
        return None

    if response.status_code in (200, 201):
        return response.json()
    else:
        st.error(f"Erro {response.status_code}: {response.text}")
        return None

# Função principal do Streamlit
def main():
    st.title("Painel de Consumo de API - Baseado em Coleção Postman")

    uploaded_file = st.file_uploader("Faça upload da coleção Postman (JSON)", type=["json", "txt"])
    
    if uploaded_file:
        collection = load_collection(uploaded_file)
        st.sidebar.header("Endpoints Disponíveis")
        
        # Exibe endpoints disponíveis na coleção
        endpoints = []
        for item in collection.get("item", []):
            if "request" in item:
                endpoints.append({"name": item["name"], "info": item["request"]})

        selected_endpoint = st.sidebar.selectbox(
            "Escolha um Endpoint",
            options=[endpoint['name'] for endpoint in endpoints]
        )

        selected_endpoint_info = next(ep for ep in endpoints if ep["name"] == selected_endpoint)
        base_url = st.text_input("Base URL", value="https://seu-endpoint-base")
        auth_token = st.text_input("Token de Autenticação (opcional)", type="password")

        if st.button("Buscar Dados"):
            data = fetch_data_from_collection(selected_endpoint_info["info"], base_url, auth_token)

            if data:
                # Exibe os dados retornados
                st.header(f"Resultados - {selected_endpoint}")
                st.json(data)

                # Converte para DataFrame se possível
                if isinstance(data, list):
                    df = pd.DataFrame(data)
                    st.dataframe(df)

                    # Exibe gráficos simples
                    if "severity" in df.columns:
                        fig = px.bar(df, x="severity", title="Vulnerabilidades por Severidade")
                        st.plotly_chart(fig)

                elif isinstance(data, dict):
                    st.write("Dados retornados em formato de dicionário.")

if __name__ == "__main__":
    main()
