-----BEGIN CERTIFICATE-----
MIIDpzCCAo+gAwIBAgIEX1BRBzANBgkqhkiG9w0BAQsFADCBijEUMBIGA1UEBhML
UG9ydFN3aWdnZXIxFDASBgNVBAgTC1BvcnRTd2lnZ2VyMRQwEgYDVQQHEwtQb3J0
U3dpZ2dlcjEUMBIGA1UEChMLUG9ydFN3aWdnZXIxFzAVBgNVBAsTDlBvcnRTd2ln
Z2VyIENBMRcwFQYDVQQDEw5Qb3J0U3dpZ2dlciBDQTAeFw0xNDEwMDIwMDU0NTJa
Fw0zNDEwMDIwMDU0NTJaMIGKMRQwEgYDVQQGEwtQb3J0U3dpZ2dlcjEUMBIGA1UE
CBMLUG9ydFN3aWdnZXIxFDASBgNVBAcTC1BvcnRTd2lnZ2VyMRQwEgYDVQQKEwtQ
b3J0U3dpZ2dlcjEXMBUGA1UECxMOUG9ydFN3aWdnZXIgQ0ExFzAVBgNVBAMTDlBv
cnRTd2lnZ2VyIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtOL3
3WKJogGORsTqAWzinbggD+70OrOvZSlL43+nDxyv9vu9vIw2Jm/I8FHaAewXMk+G
hjxU7IvBHEE03rvQUEqsECdH9ABJmtYyKiVJqD+6UAefbzcRSGmE742VQMsGiY6i
zTOAhBPhivIjSOADmDd2ytNX1/Ih8RLuFSX5G1UAkM/cwaaqC+JqW4ZqWi+sjN4I
9r8NotjVpjtKXrzXatUEJ0a1wyOk1hAAnyKscBTVaiq2COI8xELHm+yXoOaDSqZS
Sr4aS7PoztAJytdbsKRKvSQaUyLdf2hvaQ0az6HP3QY4zTP2yXhWS5UZjiqsSmwq
44SIr49NrmSBcS0D/wIDAQABoxMwETAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3
DQEBCwUAA4IBAQCg0uYL15fEHg5nez+5g7jYvDXpNwDvrWm3nUOm+1X9fe3VAG1f
l+r8asVDX6Rx/X6SrL0Z+Wm1SMWT4fmrZshIO6y+XA7ugG4rSFdK9AaLHypQkNSQ
6wOLE827uFE4EKuWtFbumI5JvuX7P4f7yZ1vLvuhW/Xov/LHcxvfi3jdeKhqn2a/
EC59aTDkm/kH8mtFal6vlcWaOnPmgrs5cQ7pKWt427sS4F7uCdcjmmSDNFwDsjOT
SzXNakPRBACerfOR9qS2vqQkTtsAlaZT7m9AmecVgFEhC99OOBCPGqPKCQvDBHQ7
ufi92+G+18vaVWLglFDM05bNStSVZZHxwXIF
-----END CERTIFICATE-----

import pandas as pd
import os

def normalize_columns(df):
    """
    Normaliza as colunas do DataFrame removendo espaços e padronizando para letras minúsculas.
    """
    df.columns = df.columns.str.strip().str.lower()
    return df

def process_vulnerabilities(input_file):
    try:
        # Carrega o arquivo CSV
        df = pd.read_csv(input_file, delimiter=None)  # Auto-detecção de delimitador
        df = normalize_columns(df)
    except Exception as e:
        print(f"Erro ao ler o arquivo CSV: {e}")
        return

    # Mapeamento das colunas esperadas
    column_mapping = {
        'projectversionid': 'projectVersionID',
        'issuename': 'issueName',
        'friority': 'friority',
    }

    # Verifica se as colunas necessárias estão presentes
    expected_columns = set(column_mapping.keys())
    if not expected_columns.issubset(df.columns):
        print(f"Colunas encontradas no arquivo: {list(df.columns)}")
        print(f"O arquivo deve conter as colunas: {', '.join(expected_columns)}")
        return

    # Renomeia as colunas para o formato esperado
    df.rename(columns=column_mapping, inplace=True)

    try:
        # Agrupamento por projectVersionID e friority
        summary = (
            df.groupby(['projectVersionID', 'friority'])
            .size()
            .unstack(fill_value=0)
            .reset_index()
        )
    except Exception as e:
        print(f"Erro ao agrupar os dados: {e}")
        return

    # Solicita o nome do arquivo de saída
    output_file = input("Digite o nome do arquivo de saída (sem extensão): ").strip()
    if not output_file.endswith(".csv"):
        output_file += ".csv"

    try:
        # Salva o resumo no arquivo de saída
        summary.to_csv(output_file, index=False)
        print(f"Resumo gerado com sucesso em: {os.path.abspath(output_file)}")
    except Exception as e:
        print(f"Erro ao salvar o arquivo de saída: {e}")

if __name__ == "__main__":
    # Solicita o caminho do arquivo de entrada
    input_file = input("Digite o caminho do arquivo CSV de entrada: ").strip()
    if not os.path.exists(input_file):
        print("Arquivo não encontrado. Verifique o caminho e tente novamente.")
    else:
        process_vulnerabilities(input_file)
