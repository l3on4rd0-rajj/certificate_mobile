-----BEGIN CERTIFICATE-----
MIIDpzCCAo+gAwIBAgIEX1BRBzANBgkqhkiG9w0BAQsFADCBijEUMBIGA1UEBhML
UG9ydFN3aWdnZXIxFDASBgNVBAgTC1BvcnRTd2lnZ2VyMRQwEgYDVQQHEwtQb3J0
U3dpZ2dlcjEUMBIGA1UEChMLUG9ydFN3aWdnZXIxFzAVBgNVBAsTDlBvcnRTd2ln
Z2VyIENBMRcwFQYDVQQDEw5Qb3J0U3dpZ2dlciBDQTAeFw0xNDEwMDIwMDU0NTJa
Fw0zNDEwMDIwMDU0NTJaMIGKMRQwEgYDVQQGEwtQb3J0U3dpZ2dlcjEUMBIGA1UE
CBMLUG9ydFN3aWdnZXIxFDASBgNVBAcTC1BvcnRTd2lnZ2VyMRQwEgYDVQQKEwtQ
b3J0U3dpZ2dlcjEXMBUGA1UECxMOUG9ydFN3aWdnZXIgQ0ExFzAVBgNVBAMTDlBv
cnRTd2lnZ2VyIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtOL3
3WKJogGORsTqAWzinbggD+70OrOvZSlL43+nDxyv9vu9vIw2Jm/I8FHaAewXMk+G
hjxU7IvBHEE03rvQUEqsECdH9ABJmtYyKiVJqD+6UAefbzcRSGmE742VQMsGiY6i
zTOAhBPhivIjSOADmDd2ytNX1/Ih8RLuFSX5G1UAkM/cwaaqC+JqW4ZqWi+sjN4I
9r8NotjVpjtKXrzXatUEJ0a1wyOk1hAAnyKscBTVaiq2COI8xELHm+yXoOaDSqZS
Sr4aS7PoztAJytdbsKRKvSQaUyLdf2hvaQ0az6HP3QY4zTP2yXhWS5UZjiqsSmwq
44SIr49NrmSBcS0D/wIDAQABoxMwETAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3
DQEBCwUAA4IBAQCg0uYL15fEHg5nez+5g7jYvDXpNwDvrWm3nUOm+1X9fe3VAG1f
l+r8asVDX6Rx/X6SrL0Z+Wm1SMWT4fmrZshIO6y+XA7ugG4rSFdK9AaLHypQkNSQ
6wOLE827uFE4EKuWtFbumI5JvuX7P4f7yZ1vLvuhW/Xov/LHcxvfi3jdeKhqn2a/
EC59aTDkm/kH8mtFal6vlcWaOnPmgrs5cQ7pKWt427sS4F7uCdcjmmSDNFwDsjOT
SzXNakPRBACerfOR9qS2vqQkTtsAlaZT7m9AmecVgFEhC99OOBCPGqPKCQvDBHQ7
ufi92+G+18vaVWLglFDM05bNStSVZZHxwXIF
-----END CERTIFICATE-----


import pandas as pd

def process_vulnerabilities(file_path, output_path):
    # Lê o arquivo CSV
    try:
        df = pd.read_csv(file_path)
    except Exception as e:
        print(f"Erro ao ler o arquivo: {e}")
        return

    # Verifica se as colunas esperadas estão presentes
    expected_columns = {'issuename', 'friority', 'projectversionid'}
    if not expected_columns.issubset(df.columns):
        print(f"O arquivo CSV deve conter as colunas: {expected_columns}")
        return

    # Converte as colunas para minúsculas para evitar inconsistências
    df.columns = df.columns.str.lower()

    # Contabiliza as vulnerabilidades por prioridade e projeto
    pivot_table = (
        df.pivot_table(
            index='projectversionid',
            columns='friority',
            values='issuename',
            aggfunc='count',
            fill_value=0
        )
        .reset_index()
    )

    # Ordena as colunas na saída
    column_order = ['projectversionid', 'Critical', 'High', 'Medium', 'Low']
    for col in column_order[1:]:
        if col not in pivot_table.columns:
            pivot_table[col] = 0  # Adiciona colunas ausentes com valor 0

    # Reordena as colunas para uma saída consistente
    pivot_table = pivot_table[column_order]

    # Exporta para um novo arquivo CSV
    try:
        pivot_table.to_csv(output_path, index=False)
        print(f"Arquivo exportado com sucesso para {output_path}")
    except Exception as e:
        print(f"Erro ao salvar o arquivo: {e}")

# Caminho do arquivo CSV de entrada e saída
input_file_path = "full_vulnerabilities_report.csv"
output_file_path = "vulnerabilities_summary.csv"

# Executa o processamento
process_vulnerabilities(input_file_path, output_file_path)

        st.warning("Data files not found. Please run the scripts to generate the data.")

if __name__ == "__main__":
    main()
