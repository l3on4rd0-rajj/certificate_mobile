import os
import re
import json
import csv
import subprocess

# Regex para capturar apenas includes do tipo <...>
INCLUDE_REGEX = re.compile(r'#include\s+<(.+?)>')

# Dicionário para armazenar bibliotecas encontradas
libraries = {}

def get_library_info(libname):
    """Tenta buscar a versão da biblioteca via pkg-config"""
    try:
        output = subprocess.check_output(['pkg-config', '--modversion', libname], stderr=subprocess.DEVNULL)
        return output.decode().strip()
    except subprocess.CalledProcessError:
        return None

def scan_c_files(project_dir):
    """Varre os arquivos .c e .h e extrai includes <...>"""
    for root, _, files in os.walk(project_dir):
        for file in files:
            if file.endswith(('.c', '.h')):
                path = os.path.join(root, file)
                with open(path, 'r', errors='ignore') as f:
                    content = f.read()
                    includes = INCLUDE_REGEX.findall(content)
                    for inc in includes:
                        if inc not in libraries:
                            base_name = inc.split('/')[0].split('.')[0]
                            version = get_library_info(base_name)
                            libraries[inc] = {
                                'name': inc,
                                'version': version or 'unknown',
                                'type': 'system_or_third_party'
                            }

def generate_json_sbom(project_dir):
    """Gera o SBOM em formato JSON"""
    sbom = {
        'project': os.path.basename(project_dir),
        'environment': 'Windows',
        'libraries': list(libraries.values())
    }
    with open('sbom.json', 'w') as f:
        json.dump(sbom, f, indent=4)
    print("✅ SBOM gerado como 'sbom.json'.")

def generate_csv_sbom():
    """Gera o SBOM em formato CSV"""
    with open('sbom.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=['name', 'version', 'type'])
        writer.writeheader()
        for lib in libraries.values():
            writer.writerow(lib)
    print("✅ SBOM gerado como 'sbom.csv'.")

if __name__ == "__main__":
    project_path = input("Informe o caminho do diretório do projeto: ").strip()
    output_format = input("Deseja gerar o SBOM em JSON ou CSV? [json/csv]: ").strip().lower()

    if not os.path.isdir(project_path):
        print("❌ Caminho inválido.")
        exit(1)

    scan_c_files(project_path)

    if output_format == 'csv':
        generate_csv_sbom()
    else:
        generate_json_sbom(project_path)
