Credenciais Hard■Coded em Arquivos de Teste – Riscos e Explorações (Versão 2)
=============================================================================
Por que credenciais hard■coded em arquivos de teste **nunca** são inofensivas
-----------------------------------------------------------------------------
Mesmo quando ficam “só na máquina do dev” ou dentro de um branch de QA, credenciais embutidas
no código abrem um leque de riscos que se estendem muito além do ambiente de teste.
Principais vetores de ameaça ----------------------------
1. Vazamento de repositório – push acidental (GitHub/GitLab), mirror mal configurado, backup
exposto. Impacto: acesso imediato ao serviço autenticado (DB, fila, API), pivoting para
produção.
2. Reutilização em produção – “funciona no QA, manda igual pra produção”. Impacto:
comprometimento direto de sistemas críticos, violação de dados.
3. Cadeia de CI/CD – pipelines copiam os arquivos de teste para imagens ou logs. Impacto:
segredos em registries, logs de build; atacante precisa apenas de acesso de leitura.
4. Reconhecimento automatizado – ferramentas como truffleHog e gitLeaks encontram tokens em
segundos.
5. Engenharia social interna – colaborador percebe o “atalho” e mantém cópias para uso futuro.
6. Shadow IT / Conformidade – segredos hard■coded ignoram rotação obrigatória e controles RBAC.
Impacto: quebra de PCI■DSS, ISO 27001, LGPD/GDPR (multas e sanções).
Explorações concretas ---------------------
• Enumeração GitHub pública: procura por padrões como AKIA[0■9A-Z]{16}; usa chaves para baixar
buckets S3, extrair configs internas, ou escalar para RCE.
• Compromisso de container: credenciais em /app/tests/settings.py acabam num layer; scanners
públicos extraem o layer, usam as chaves para plantar payloads que evoluem para staging/prod.
• Vazamento em build logs: pipeline imprime variáveis; tokens aparecem em claro num serviço de
log SaaS.
• Phishing orientado: atacante vê `const jwtSecret = 'abc123'` no Slack e usa para enganar
devs.
Avaliação de risco (CIA + Compliance) ------------------------------------
Confidencialidade: ALTA Integridade: ALTA Disponibilidade: MÉDIA■ALTA Detecção:
BAIXA Compliance: CRÍTICA – viola CWE■259, OWASP A07:2021, NIST SSDF §3.2
Boas práticas de mitigação --------------------------
1. Segredos fora do código – .env ignorado pelo VCS ou gerenciadores (AWS Secrets Manager,
Vault). 2. Rotação & escopo mínimo – tokens de teste read■only, expiram em horas/dias. 3.
Scanning automático de commits – hooks pre■commit + truffleHog/gitLeaks. 4. Revisão de imagens
& artefatos – Syft/Grype, Dockle; assinatura e attestation antes de promover. 5. Segurança de
logs – redaction de variáveis sensíveis. 6. Educação & gates – revisão de pull■requests pelo
time de segurança.
Checklist de resposta imediata ------------------------------
1. Inventário – buscar segredos no histórico (`git log --all -S "AKIA"`). 2. Revogar ou
rotacionar imediatamente as credenciais expostas. 3. Reescrever o histórico (git filter■repo ou
BFG) se repositório é público. 4. Implementar scanner de segredos em cada push. 5. Atualizar
playbooks de incidente para lidar com vazamento de credenciais.
