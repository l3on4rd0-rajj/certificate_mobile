
import pandas as pd
import requests
from datetime import datetime
import urllib3

# Desabilita os avisos de verifica√ß√£o de certificado SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Caminho da planilha Excel (ajuste conforme o seu)
excel_path = "C:/Users/Leonardo/Documents/produtos.xlsx"

print(f"üì• Lendo planilha: {excel_path}")
df = pd.read_excel(excel_path)

print(f"üìä Total de registros: {len(df)}\n")

resultados = []

def verificar_suporte(produto, versao):
    url = f"https://endoflife.date/api/{produto}.json"
    print(f"üîé Consultando API: {url} ...")
    try:
        # Ignora verifica√ß√£o SSL
        resp = requests.get(url, timeout=10, verify=False)
        if resp.status_code != 200:
            print(f"  ‚ö† Produto '{produto}' n√£o encontrado (HTTP {resp.status_code})")
            return {"status": "Produto n√£o encontrado", "eol": None, "latest": None}

        ciclos = resp.json()
        for ciclo in ciclos:
            if str(ciclo["cycle"]) == str(versao):
                eol_data = ciclo.get("eol")
                latest = ciclo.get("latest", "")
                if eol_data and eol_data != "false":
                    eol_date = datetime.strptime(eol_data, "%Y-%m-%d")
                    ainda_em_suporte = eol_date > datetime.today()
                else:
                    ainda_em_suporte = True
                    eol_date = None

                status = "‚úÖ Em suporte" if ainda_em_suporte else "‚ùå EOL"
                print(f"  ‚û§ Produto: {produto}, Vers√£o: {versao}, Status: {status}, √öltima vers√£o: {latest}, EOL: {eol_data}")
                return {
                    "status": status,
                    "eol": eol_date.strftime("%Y-%m-%d") if eol_date else "Sem EOL",
                    "latest": latest
                }

        print(f"  ‚ùì Vers√£o '{versao}' n√£o encontrada para o produto '{produto}'")
        return {"status": "Vers√£o n√£o encontrada", "eol": None, "latest": None}

    except Exception as e:
        print(f"  ‚ö† Erro ao consultar '{produto}': {str(e)}")
        return {"status": f"Erro: {str(e)}", "eol": None, "latest": None}

# Processar cada linha
for i, row in df.iterrows():
    produto = str(row["produto"]).strip().lower()
    versao = str(row["versao"]).strip()
    print(f"\nüîÑ [{i+1}/{len(df)}] Verificando: {produto} {versao}")
    resultado = verificar_suporte(produto, versao)
    resultados.append({
        "produto": produto,
        "versao": versao,
        "status": resultado["status"],
        "eol": resultado["eol"],
        "ultima_versao": resultado["latest"]
    })

# Salvar resultado
output_file = "resultado_endoflife.xlsx"
df_resultado = pd.DataFrame(resultados)
df_resultado.to_excel(output_file, index=False)

print(f"\n‚úÖ Conclu√≠do! Resultado salvo como '{output_file}'")
