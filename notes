import pandas as pd
import os
from tkinter import Tk, filedialog

def escolher_local_salvamento():
    root = Tk()
    root.withdraw()
    caminho = filedialog.asksaveasfilename(
        defaultextension=".csv",
        filetypes=[("Arquivos CSV", "*.csv"), ("Todos os arquivos", "*.*")],
        title="Salvar como"
    )
    return caminho

# Configura√ß√£o (ajuste esses nomes conforme seus arquivos)
COLUNA_PROJETO = 'product'  # Coluna que identifica os projetos
COLUNA_MS = 'ms'            # Coluna com os MS
ARQUIVO1 = r'C:\Users\Leonardo Vargas\PycharmProjects\comparador\pythonProject1\arquivo1.csv'
ARQUIVO2 = r'C:\Users\Leonardo Vargas\PycharmProjects\comparador\pythonProject1\arquivo2.csv'

try:
    # 1. Carregar os arquivos
    df1 = pd.read_csv(ARQUIVO1, delimiter=';')
    df2 = pd.read_csv(ARQUIVO2, delimiter=';')
    
    # 2. Padronizar colunas
    df1.columns = df1.columns.str.strip().str.lower()
    df2.columns = df2.columns.str.strip().str.lower()
    
    # 3. Verificar colunas essenciais
    for col in [COLUNA_PROJETO, COLUNA_MS]:
        if col not in df1.columns:
            raise ValueError(f"Coluna '{col}' n√£o encontrada no arquivo1")
    
    if 'project name' not in df2.columns:
        raise ValueError("Coluna 'project name' n√£o encontrada no arquivo2")

    # 4. Calcular status (OK/NOK)
    df1['status'] = 'nok'
    df1.loc[df1[COLUNA_MS].isin(df2['project name']), 'status'] = 'ok'

    # 5. Calcular estat√≠sticas por projeto
    stats = df1.groupby(COLUNA_PROJETO).agg(
        total_ms=(COLUNA_MS, 'count'),
        qtd_ok=('status', lambda x: (x == 'ok').sum()),
        qtd_nok=('status', lambda x: (x == 'nok').sum())
    )
    
    # 6. Calcular porcentagens
    stats['%_ok'] = (stats['qtd_ok'] / stats['total_ms'] * 100).round(2)
    stats['%_nok'] = (stats['qtd_nok'] / stats['total_ms'] * 100).round(2)
    
    # 7. Juntar ao dataframe original (mantendo todas as linhas)
    df_final = df1.join(stats, on=COLUNA_PROJETO, how='left')

    # 8. Ordenar colunas (opcional)
    colunas_ordenadas = [
        COLUNA_PROJETO, COLUNA_MS, 'status',
        'total_ms', 'qtd_ok', 'qtd_nok', '%_ok', '%_nok'
    ] + [col for col in df1.columns if col not in [COLUNA_PROJETO, COLUNA_MS, 'status']]
    
    df_final = df_final[colunas_ordenadas]

    # 9. Salvar resultado
    caminho_saida = escolher_local_salvamento()
    if caminho_saida:
        df_final.to_csv(caminho_saida, index=False, sep=';')
        print(f"‚úÖ Arquivo gerado com sucesso em: {caminho_saida}")
        print("\nüîç Amostra das novas colunas:")
        print(df_final[[COLUNA_PROJETO, COLUNA_MS, 'status', 'total_ms', 'qtd_ok', 'qtd_nok', '%_ok', '%_nok']].head())
    else:
        print("Opera√ß√£o cancelada pelo usu√°rio.")

except Exception as e:
    print(f"‚ùå Erro: {str(e)}")
    print("\nüîß Dicas para corre√ß√£o:")
    print(f"1. Verifique se a coluna de projeto se chama '{COLUNA_PROJETO}'")
    print(f"2. Confirme se a coluna de MS se chama '{COLUNA_MS}'")
    print("3. Verifique o delimitador dos arquivos")
