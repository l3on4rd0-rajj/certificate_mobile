import os
import re
import json
import csv

# Express√£o regular para capturar apenas includes com <...> (bibliotecas externas)
INCLUDE_REGEX = re.compile(r'#include\s+<(.+?)>')

def get_includes_from_file(file_path):
    includes = []
    with open(file_path, 'r', errors='ignore') as f:
        content = f.read()
        includes = INCLUDE_REGEX.findall(content)
    return includes

def scan_c_project(project_dir):
    libraries = {}
    for root, _, files in os.walk(project_dir):
        for file in files:
            if file.endswith(('.c', '.h', '.cpp', '.hpp')):
                full_path = os.path.join(root, file)
                includes = get_includes_from_file(full_path)
                for inc in includes:
                    if inc not in libraries:
                        libraries[inc] = {
                            "name": inc,
                            "version": "unknown",
                            "type": "system_or_third_party",
                            "language": "C/C++"
                        }
    return libraries

def export_json(sbom_data, output_path):
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(sbom_data, f, indent=4)
    print(f"[+] SBOM exportado como JSON: {output_path}")

def export_csv(sbom_data, output_path):
    with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['name', 'version', 'type', 'language']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for lib in sbom_data['libraries']:
            writer.writerow(lib)
    print(f"[+] SBOM exportado como CSV: {output_path}")

def main():
    print("üîç Gerador de SBOM para projetos C/C++ no Windows\n")
    project_path = input("üìÇ Caminho do diret√≥rio do projeto: ").strip('"')
    if not os.path.isdir(project_path):
        print("‚ùå Caminho inv√°lido. Verifique e tente novamente.")
        return

    output_format = input("üì§ Deseja gerar o SBOM em JSON ou CSV? (json/csv): ").strip().lower()
    if output_format not in ['json', 'csv']:
        print("‚ùå Formato inv√°lido. Use 'json' ou 'csv'.")
        return

    project_name = os.path.basename(project_path.rstrip("\\/"))
    libraries = scan_c_project(project_path)

    sbom_data = {
        "project": project_name,
        "environment": "Windows",
        "libraries": list(libraries.values())
    }

    if output_format == 'json':
        export_json(sbom_data, os.path.join(project_path, "sbom.json"))
    else:
        export_csv(sbom_data, os.path.join(project_path, "sbom.csv"))

if __name__ == "__main__":
    main()

