import requests
from requests.auth import HTTPBasicAuth
import openpyxl
from openpyxl.styles import Font
import urllib3
import time

# ==== CONFIGURA√á√ïES ====
BASE_URL = "https://nexusiq.santander.fortifyhosted.com"
USERNAME = "santander-group-getnet-brazil service user"
PASSWORD = "06YZOdRA9RMo"

HEADERS = {
    "accept": "application/json"
}

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ==== FUN√á√ïES ====
def get_applications():
    url = f"{BASE_URL}/api/v2/applications"
    try:
        response = requests.get(url, headers=HEADERS, auth=HTTPBasicAuth(USERNAME, PASSWORD), verify=False)
        response.raise_for_status()
        return response.json().get("applications", [])
    except requests.RequestException as e:
        print(f"‚ùå Erro ao buscar aplica√ß√µes: {e}")
        return []

def get_report(application_id):
    url = f"{BASE_URL}/api/v2/reports/applications/{application_id}"
    try:
        response = requests.get(url, headers=HEADERS, auth=HTTPBasicAuth(USERNAME, PASSWORD), verify=False)
        response.raise_for_status()
        data = response.json()

        if not isinstance(data, dict):
            print(f"‚ö†Ô∏è Resposta inesperada para applicationId {application_id} (esperado dict, recebido {type(data).__name__})")
            return None

        return data
    except requests.RequestException as e:
        print(f"‚ùå Erro ao buscar relat√≥rio de {application_id}: {e}")
        return None

def extract_vulnerabilities(public_id, components):
    results = []

    for component in components:
        name = component.get("componentIdentifier", {}).get("displayName", "")
        version = component.get("componentIdentifier", {}).get("version", "")

        upgrade = component.get("upgradeGuidance", {})
        upgrade_short = upgrade.get("shortTerm", {}).get("version", "")
        upgrade_long = upgrade.get("longTerm", {}).get("version", "")
        recommended = upgrade_short or upgrade_long or "N/A"

        policy_violations = component.get("policyViolations", [])
        for violation in policy_violations:
            policy_name = violation.get("policyName", "")
            threat_level = violation.get("threatLevel", "")
            constraints = violation.get("constraintViolations", [])

            for c in constraints:
                reason = c.get("reason", "")
                cve = reason if "CVE" in reason else ""
                results.append({
                    "microservice": public_id,
                    "dependency": name,
                    "version": version,
                    "recommended": recommended,
                    "policy": policy_name,
                    "threat": threat_level,
                    "reason": reason,
                    "cve": cve
                })

    return results

def write_excel(vulns):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Depend√™ncias Vulner√°veis"

    headers = [
        "Microservi√ßo", "Depend√™ncia", "Vers√£o Atual", "Vers√£o Recomendada",
        "Pol√≠tica Violada", "Severidade", "Motivo", "CVE"
    ]
    ws.append(headers)

    for cell in ws[1]:
        cell.font = Font(bold=True)

    for v in vulns:
        ws.append([
            v["microservice"],
            v["dependency"],
            v["version"],
            v["recommended"],
            v["policy"],
            v["threat"],
            v["reason"],
            v["cve"]
        ])

    wb.save("relatorio_dependencias_vulneraveis.xlsx")
    print("‚úÖ Excel salvo como 'relatorio_dependencias_vulneraveis.xlsx'")

# ==== EXECU√á√ÉO ====
def main():
    all_vulns = []
    apps = get_applications()

    for app in apps:
        public_id = app.get("publicId")
        application_id = app.get("id")
        print(f"\nüîç Verificando: {public_id}")

        report = get_report(application_id)

        if not report:
            print(f"‚ö†Ô∏è Nenhum relat√≥rio v√°lido para {public_id}. Pulando.")
            continue

        if isinstance(report, dict):
            components = report.get("components", [])
        else:
            print(f"‚ö†Ô∏è Estrutura inesperada no relat√≥rio de {public_id}: {type(report).__name__}")
            continue

        vulns = extract_vulnerabilities(public_id, components)
        print(f"üìå {len(vulns)} vulnerabilidades encontradas.")
        all_vulns.extend(vulns)

        time.sleep(0.5)

    if all_vulns:
        write_excel(all_vulns)
    else:
        print("‚úî Nenhuma vulnerabilidade relevante encontrada.")

if __name__ == "__main__":
    main()
