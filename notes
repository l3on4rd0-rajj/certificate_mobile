import streamlit as st
from pytm import TM, Boundary, Actor, Server, Dataflow, Datastore
import graphviz

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Gerador de Modelo de Amea√ßas", layout="wide")

# T√≠tulo da aplica√ß√£o
st.title("üîê Gerador Autom√°tico de Modelo de Amea√ßas")

# Formul√°rio principal
with st.form("threat_model_form"):
    st.header("1Ô∏è‚É£ Informe os Componentes do Sistema")
    
    col1, col2 = st.columns(2)
    with col1:
        app_name = st.text_input("Nome da Aplica√ß√£o", help="Ex: Sistema de Pagamentos Online")
        actor_name = st.text_input("Ator Principal", value="Usu√°rio")
        web_server = st.text_input("Servidor Web", value="API Gateway")
    
    with col2:
        db_name = st.text_input("Banco de Dados", value="MySQL")
        external_service = st.text_input("Servi√ßo Externo (opcional)", value="Gateway de Pagamento")
    
    st.header("2Ô∏è‚É£ Defina os Fluxos de Dados")
    flow1 = st.text_input("Fluxo 1 (Ator ‚Üí Servidor)", value="Login HTTP")
    flow2 = st.text_input("Fluxo 2 (Servidor ‚Üí Banco)", value="Query SQL")
    flow3 = st.text_input("Fluxo 3 (Servidor ‚Üí Externo)", value="Chamada API")
    
    submit = st.form_submit_button("‚ñ∂Ô∏è Gerar Diagrama")

# Processamento quando o formul√°rio √© enviado
if submit:
    # Inicializa o modelo pytm
    tm = TM(app_name)
    tm.description = "Gerado automaticamente via Streamlit"
    
    # Cria os boundaries
    internet = Boundary("Internet")
    sistema = Boundary("Sistema")
    externo = Boundary("Externo")
    
    # Adiciona componentes
    actor = Actor(actor_name)
    actor.inBoundary = internet
    
    server = Server(web_server)
    server.inBoundary = sistema
    
    database = Datastore(db_name)
    database.inBoundary = sistema
    
    external = Server(external_service)
    external.inBoundary = externo
    
    # Cria os fluxos
    Dataflow(actor, server, flow1)
    Dataflow(server, database, flow2)
    Dataflow(server, external, flow3)
    
    # Gera o diagrama usando graphviz
    st.header("üé® Diagrama Gerado Automaticamente")
    
    # Cria o objeto graphviz
    dot = graphviz.Digraph()
    dot.attr(rankdir='LR')
    
    # Adiciona n√≥s e arestas
    with dot.subgraph(name='cluster_internet') as c:
        c.attr(label='Internet')
        c.node(actor.name, shape='egg')
    
    with dot.subgraph(name='cluster_sistema') as c:
        c.attr(label='Sistema')
        c.node(server.name, shape='box')
        c.node(database.name, shape='cylinder')
    
    with dot.subgraph(name='cluster_externo') as c:
        c.attr(label='Externo')
        c.node(external.name, shape='box')
    
    dot.edge(actor.name, server.name, label=flow1)
    dot.edge(server.name, database.name, label=flow2)
    dot.edge(server.name, external.name, label=flow3)
    
    # Exibe o diagrama
    st.graphviz_chart(dot)
    
    # Bot√£o de download
    dot.render('threat_model', format='png', cleanup=True)
    with open("threat_model.png", "rb") as file:
        st.download_button(
            label="üì• Baixar Diagrama",
            data=file,
            file_name="threat_model.png",
            mime="image/png"
        )
    
    st.success("‚úÖ Modelo gerado com sucesso!")
