"""
Gera um Excel com todas as dependências dos seus micro-serviços Nexus IQ
e cruza cada <artefato-versão> com a matriz de ciclo de vida do endoflife.date.
Requer: pip install requests pandas openpyxl
"""
from __future__ import annotations
import os
import requests
import pandas as pd
from requests.auth import HTTPBasicAuth
from urllib.parse import quote_plus
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ----------------------------------------------------------------------
# 1) Configuração – use variáveis de ambiente em vez de credenciais fixas
# ----------------------------------------------------------------------
BASE_URL = "https://nexusiq.santander.fortifyhosted.com"
USERNAME = os.getenv("NEXUS_USERNAME")
PASSWORD = os.getenv("NEXUS_PASSWORD")
HEADERS  = {"Accept": "application/json"}
AUTH     = HTTPBasicAuth(USERNAME, PASSWORD)

# ----------------------------------------------------------------------
# 2) Nexus IQ
# ----------------------------------------------------------------------
def get_applications() -> list[dict]:
    url = f"{BASE_URL}/api/v2/applications?includeCategories=false"
    r = requests.get(url, headers=HEADERS, auth=AUTH, verify=False, timeout=30)
    r.raise_for_status()
    return r.json().get("applications", [])

def get_components(public_id: str) -> list[dict]:
    url = f"{BASE_URL}/api/v2/reports/{quote_plus(public_id)}/components"
    r = requests.get(url, headers=HEADERS, auth=AUTH, verify=False, timeout=60)
    if r.status_code != 200:          # mantém o fluxo mesmo se falhar
        print(f"[WARN] Não foi possível obter dependências de {public_id}: {r.status_code}")
        return []
    return r.json()

# ----------------------------------------------------------------------
# 3) endoflife.date
# ----------------------------------------------------------------------
EOL_BASE = "https://endoflife.date/api/v1"

def build_eol_map() -> dict[str, dict]:
    """
    Constrói um dicionário: "<produto>-<versão>"  ->  {release_date, eol, lts}
    """
    prod_list = requests.get(f"{EOL_BASE}/products.json", timeout=30)
    prod_list.raise_for_status()

    eol_map: dict[str, dict] = {}
    for product in prod_list.json():            # product["slug"] ex.: "python"
        slug = product["slug"]
        cycles = requests.get(f"{EOL_BASE}/products/{slug}.json", timeout=30).json().get("cycles", [])
        for c in cycles:
            key = f"{slug}-{str(c['cycle']).lower()}"
            eol_map[key] = {
                "release": c.get("releaseDate"),
                "eol":     c.get("eol"),
                "lts":     c.get("lts"),
            }
    return eol_map

# ----------------------------------------------------------------------
# 4) Consolidação e Excel
# ----------------------------------------------------------------------
def main() -> None:
    apps       = get_applications()
    eol_lookup = build_eol_map()
    rows: list[dict] = []

    for app in apps:
        name, pid = app["name"], app["publicId"]
        print(f"⏳  Buscando dependências de {name}…")
        for comp in get_components(pid):
            coords = comp.get("componentIdentifier", {}).get("coordinates", {})
            artifact = coords.get("artifactId")
            version  = coords.get("version")
            if not (artifact and version):
                continue

            key = f"{artifact.lower()}-{version}"
            eol = eol_lookup.get(key, {})
            rows.append({
                "Microserviço"      : name,
                "Dependência"       : artifact,
                "Versão atual"      : version,
                "Data de lançamento": eol.get("release", ""),
                "Data de EOL"       : eol.get("eol", ""),
                "LTS"               : eol.get("lts", ""),
            })

    df = pd.DataFrame(rows)
    df.to_excel("relatorio_dependencias_com_eol.xlsx", index=False)
    print("✅  relatorio_dependencias_com_eol.xlsx gerado com sucesso!")

if __name__ == "__main__":
    main()
