import os
import re
import json
import csv

INCLUDE_REGEX = re.compile(r'#include\s+<(.+?)>')

def scan_c_files(project_path):
    libraries = {}
    for root, _, files in os.walk(project_path):
        for file in files:
            if file.endswith(('.c', '.h')):
                with open(os.path.join(root, file), 'r', errors='ignore') as f:
                    content = f.read()
                    includes = INCLUDE_REGEX.findall(content)
                    for inc in includes:
                        if inc not in libraries:
                            libraries[inc] = {
                                "name": inc,
                                "version": "unknown",
                                "type": "system"
                            }
    return list(libraries.values())

def save_as_json(output_path, project_name, libraries):
    sbom = {
        "project": project_name,
        "environment": "Windows",
        "libraries": libraries
    }
    with open(output_path, 'w') as f:
        json.dump(sbom, f, indent=4)
    print(f"✅ SBOM salvo como {output_path}")

def save_as_csv(output_path, libraries):
    with open(output_path, 'w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=["name", "version", "type"])
        writer.writeheader()
        writer.writerows(libraries)
    print(f"✅ SBOM salvo como {output_path}")

if __name__ == "__main__":
    project_path = input("Informe o caminho do diretório do projeto: ").strip('"')
    output_format = input("Deseja gerar o SBOM em JSON ou CSV? [json/csv]: ").strip().lower()

    if not os.path.isdir(project_path):
        print("❌ Caminho inválido.")
        exit(1)

    libraries = scan_c_files(project_path)
    project_name = os.path.basename(project_path)

    if output_format == "json":
        save_as_json("sbom.json", project_name, libraries)
    elif output_format == "csv":
        save_as_csv("sbom.csv", libraries)
    else:
        print("❌ Formato inválido.")
