import os
import re
import json
import csv

PROJECT_DIR = input("Informe o caminho do diretório do projeto: ").strip()
OUTPUT_FORMAT = input("Formato de saída (json/csv): ").strip().lower()

# Expressões regulares para cada linguagem
PATTERNS = {
    "c_cpp": re.compile(r'#include\s+[<"](.+?)[>"]'),
    "python": re.compile(r'^\s*(?:from|import)\s+([\w\.]+)', re.MULTILINE),
    "java": re.compile(r'import\s+([\w\.]+);'),
    "csharp": re.compile(r'using\s+([\w\.]+);')
}

libraries = []

def detect_language_and_extract(path, content):
    if path.endswith(('.c', '.h', '.cpp', '.hpp')):
        lang = "C/C++"
        matches = PATTERNS["c_cpp"].findall(content)
    elif path.endswith('.py'):
        lang = "Python"
        matches = PATTERNS["python"].findall(content)
    elif path.endswith('.java'):
        lang = "Java"
        matches = PATTERNS["java"].findall(content)
    elif path.endswith('.cs'):
        lang = "C#"
        matches = PATTERNS["csharp"].findall(content)
    else:
        return

    for lib in matches:
        if not any(d["name"] == lib and d["language"] == lang for d in libraries):
            libraries.append({
                "name": lib,
                "language": lang,
                "version": "unknown",
                "license": "unknown"
            })

def scan_project():
    for root, _, files in os.walk(PROJECT_DIR):
        for file in files:
            path = os.path.join(root, file)
            try:
                with open(path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    detect_language_and_extract(path, content)
            except Exception as e:
                print(f"Erro ao ler {path}: {e}")

def export_json():
    sbom = {
        "project": os.path.basename(PROJECT_DIR),
        "environment": "multi-language",
        "libraries": libraries
    }
    with open("sbom_multi.json", "w", encoding="utf-8") as f:
        json.dump(sbom, f, indent=4)
    print("✅ Exportado como sbom_multi.json")

def export_csv():
    with open("sbom_multi.csv", "w", newline='', encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=["name", "language", "version", "license"])
        writer.writeheader()
        writer.writerows(libraries)
    print("✅ Exportado como sbom_multi.csv")

if __name__ == "__main__":
    scan_project()
    if OUTPUT_FORMAT == "csv":
        export_csv()
    else:
        export_json()
